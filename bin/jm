#!/usr/bin/env node

'use strict';

process.title = 'jm';

const fs = require('fs');
const program = require('commander');
const shell = require('shelljs/global');
const ora = require('ora');
const conventionalChangelog = require('conventional-changelog');

const { initProject, updateGhPages, genAuthor, genPage, getOptions } = require('../lib');

program
    .usage('<command> [options]')
    .version(require('../package.json').version)
    .option('-c, --configure <path>', 'config file path')

program
    .command('init')
    .usage('<project-type> [project-name]')
    .description('initialize project, you can choose the framework with AngularJS or Vue2')
    .action(function () {
        initProject()
    });

program
    .command('install')
    .alias('i')
    .description('Install Package')
    .action(function () {
        const spinner = ora('Installing Package...');
        spinner.start();
        exec('yarn install', {async: true}, function (code, stdout, stderr) {
            spinner.stop();
            console.log('Exit code:', code);
            console.log('Program output:', stdout);
            console.log('Program stderr:', stderr);
        });
    });

program
    .command('dev')
    .description('dev build')
    .action(function () {
        exec('yarn run dev');
    });

program
    .command('build')
    .description('production build')
    .action(function () {
        exec('yarn run build');
    });

program
    .command('server')
    .alias('s')
    .description('production service')
    .action(function () {
        if(fs.existsSync('./server.js')) {
          exec('node server');
        } else {
          console.log('================================')
          console.log(`  can't found server.js at root `)
          console.log('================================')
        }
    });

program
    .command('seed')
    .description('publish seed')
    .action(function () {
        exec('jm jsdoc && jm changelog && jm author && jm site');
    });

program
    .command('jsdoc')
    .alias('d')
    .usage('-c <path>')
    .description('generator jsdoc')
    .action(function () {
        if(program.config) {
            require('jsdoc/jsdoc');
            console.log('================================')
            console.log(`     jsdoc already created!     `)
            console.log('================================')
        } else {
            console.log('====================================')
            console.log('$ jm doc -c ./config/jm.config.json ')
            console.log('====================================')
            console.log('The path to the configuration file. Default: ./config/jm.config.json')
        }
        // exec('jsdoc -c ' + confPath);
    });

program
    .command('changelog')
    .alias('l')
    .description('generator CHANGELOG.md')
    .action(function() {
      const fileName = typeof program.args[0] === 'string' ? program.args[0] : 'CHANGELOG.md';

      conventionalChangelog({
        preset: 'angular',
        releaseCount: 0
      })
      .pipe(fs.createWriteStream(fileName)); // or any writable stream

      console.log('================================')
      console.log(`  ${fileName} already created!  `)
      console.log('================================')
      // exec('conventional-changelog -p angular -i CHANGELOG.md -s -r 0');
    });

program
    .command('author')
    .alias('a')
    .description('generator AUTHORS.md')
    .action(function () {
        const options = getOptions();
        const fileName = typeof program.args[0] === 'string' ? program.args[0] : 'AUTHORS.md';
        const exclude = options.authors && options.authors.exclude;

        genAuthor(fileName, exclude);
    });


program
    .command('site')
    .description('push gh-pages')
    .action(function () {
        const options = getOptions();
        const list = options['gh-pages'].list;

        updateGhPages(list);
    });

program
    .command('ng:page')
    .description('generator new page')
    .action(function () {
        genPage()
    });

/**
 * help
 */

function help() {
    program.parse(process.argv)
    if (program.args.length < 1) {
        return program.help()
    }
}

help();