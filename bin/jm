#!/usr/bin/env node

'use strict';

process.title = 'jm';

const fs = require('fs');
const program = require('commander');
const shell = require('shelljs/global');
const ora = require('ora');

const initProject = require('../lib/init').init;
const updateGhPages = require('../lib/gh-pages').updateGhPages;
const genAuthor = require('../lib/author').author;
const genPage = require('../lib/page').page;
const getOptions = require('../lib/options').options;

program
    .usage('<command> [options]')
    .version(require('../package.json').version)
    .option('-c, --config [path]', 'config file path')

program
    .command('init')
    .usage('<project-type> [project-name]')
    .description('initialize project, you can choose the framework with AngularJS or Vue2')
    .action(function () {
        initProject()
    });

program
    .command('install')
    .alias('i')
    .description('Install Package')
    .action(function () {
        const spinner = ora('Installing Package...');
        spinner.start();
        exec('yarn install', {async: true}, function (code, stdout, stderr) {
            spinner.stop();
            console.log('Exit code:', code);
            console.log('Program output:', stdout);
            console.log('Program stderr:', stderr);
        });
    });

program
    .command('dev')
    .description('dev build')
    .action(function () {
        exec('yarn run dev');
    });

program
    .command('build')
    .description('production build')
    .action(function () {
        exec('yarn run build');
    });

program
    .command('seed')
    .description('publish seed')
    .action(function () {
        exec('jm jsdoc && jm changelog && jm author && jm site');
    });

program
    .command('jsdoc')
    .description('generator jsdoc')
    .action(function () {
        const confPath = program.config || './config/jm.config.json';

        exec('jsdoc -c ' + confPath);
    });

program
    .command('changelog')
    .description('generator changelog.md')
    .action(function () {
        exec('conventional-changelog -p angular -i CHANGELOG.md -s -r 0');
    });

program
    .command('author')
    .description('generator authors.md')
    .action(function () {
        const options = getOptions();
        const fileName = 'AUTHORS.md';
        const exclude = options.authors.exclude;

        genAuthor(fileName, exclude);
    });


program
    .command('site')
    .description('push gh-pages')
    .action(function () {
        const options = getOptions();
        const list = options['gh-pages'].list;

        updateGhPages(list);
    });

program
    .command('ng:page')
    .description('generator new page')
    .action(function () {
        genPage()
    });

/**
 * help
 */

function help() {
    program.parse(process.argv)
    if (program.args.length < 1) {
        return program.help()
    }
}

help();