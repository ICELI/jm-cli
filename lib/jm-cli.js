const fs = require('fs');
const path = require('path');
const util = require('util');
const program = require('commander');
const ora = require('ora');
const chalk = require('chalk');
const download = require('download-git-repo');
const shell = require('shelljs/global');
const cwd = process.cwd();
const resolve = file => path.resolve(cwd, file)
const confPath  = './config/jm.config.json';
let conf = null;
if(fs.existsSync(resolve(confPath))) {
    conf = require(resolve(confPath));
} else {
    console.error('Can not find jm.config.json')
}

program
    .usage('<command> [options]')
    .version(require('../package.json').version)

program
    .command('init')
    .usage('<project-type> [project-name]')
    .description('initialize project, you can choose the framework with AngularJS or Vue2')
    .action(function () {

        /**
         * download argv
         */

        let projectType = program.args[0];
        let projectName = program.args[1];
        let projectPath = process.cwd() + '/' + projectName;
        let owner = 'jm-team'; // github
        let repo;

        if (!fs.existsSync(projectPath)) {

            if (projectType == 'ng' || projectType == 'vue') {
                repo = owner + '/' + projectType + '-seed';
            } else {
                repo = projectType;
            }
            console.log(chalk.green(">> 准备创建项目: " + projectName));
            const spinner = ora('downloading template from repo: ' + repo);
            spinner.start();
            download(repo, projectName, function (err) {
                spinner.stop();
                if (err) {
                    console.error(chalk.red('Failed to download repo ' + repo + ': ' + err.message.trim()))
                    process.exit(1)
                } else {
                    console.log();
                    console.log(chalk.green('-- 项目创建成功'));
                    console.log('==============================');
                    console.log('$ cd ' + projectName + ' ，进入目录!');
                    console.log('$ jm i，安裝依赖包！');
                    console.log('$ jm dev，启动项目！');
                    console.log('$ jm build，打包项目！');
                    console.log('==============================');
                }
            })
        } else {
            console.error(chalk.red(projectName + '项目已经存在，请使用其他名称！'));
        }
    });

program
    .command('install')
    .alias('i')
    .description('Install Package')
    .action(function () {
        const spinner = ora('Installing Package...');
        spinner.start();
        exec('npm install', {async: true}, function (code, stdout, stderr) {
            spinner.stop();
            console.log('Exit code:', code);
            console.log('Program output:', stdout);
            console.log('Program stderr:', stderr);
        });
    });

program
    .command('dev')
    .description('dev build')
    .action(function () {
        exec('npm run dev');
    });

program
    .command('build')
    .description('production build')
    .action(function () {
        exec('npm run build');
    });

program
    .command('seed')
    .description('publish seed')
    .action(function () {
        exec('jm jsdoc && jm changelog && jm author && jm site');
    });

program
    .command('jsdoc')
    .description('generator jsdoc')
    .action(function () {
        exec('jsdoc -c ' + confPath);
    });

program
    .command('changelog')
    .description('generator changelog.md')
    .action(function () {
        exec('conventional-changelog -p angular -i CHANGELOG.md -s -r 0');
    });

program
    .command('author')
    .description('generator authors.md')
    .action(function () {
        const fileName = 'AUTHORS.md'
        const exclude = (conf.authors.exclude || []).join('|')
        const reg = new RegExp('(' + exclude + ')')

        exec('git log --reverse --format="- %aN <%aE>"', {async: true}, (code, stdout, stderr) => {
            if (stderr) throw stderr

            const set = new Set(stdout.split('\n'))
            const authors = [...set].filter((val) => !reg.test(val) && val)

            const fileContent = `# Authors

#### Ordered by first contribution.

${authors.join('\n')}  

#### Generated by build/authors.js.`

            fs.open(fileName, 'wx', (err, fd) => {
                if (err) {
                    if (err.code === 'EEXIST') {
                        fs.writeFile(fileName, fileContent, (e) => {
                            if (e) throw e
                            console.log(`${fileName} already up-to-date`)
                        })
                        return
                    }
                    throw err
                }

                fs.write(fd, fileContent, 0, 'utf8', (e) => {
                    if (e) throw e
                    fs.closeSync(fd)
                    console.log(`${fileName} already created`)
                })
            })
        })
    });


program
    .command('site')
    .description('push gh-pages')
    .action(function () {
        const list = conf['gh-pages'].list || []

        list.forEach(item => replaceForGhPages(resolve(item.filePath), item.target, item.content))

        getGhPages().then(pullGhPages)

        function getGhPages() {
            return new Promise(function (resolve, reject) {

                console.log('Building... Please wait a moment.')

                exec('yarn run build', (code, stdout, stderr) => {
                    console.log('build success', stdout)
                    console.log('build success')
                    // pullGhPages()
                    resolve();
                })
            });
        }

        function pullGhPages() {

            console.log('Pushing gh-pages... Please wait a moment.')

            exec('gh-pages -d dist', (code, stdout, stderr) => {

                console.log('gh-pages success', stdout)

                list.forEach(item => replaceForGhPages(resolve(item.filePath), item.content, item.target))

                console.log('Tip: revert success, Opening https://jm-team.github.io/ng-seed')
            })
        }

        /**
         * 替换文件中的字符为指定内容, 以便build为gh-pages所需要的路径格式
         * @param file 文件路径
         * @param target 需要被替换的目标
         * @param content 替换后的内容
         */
        function replaceForGhPages(file, target, content) {
            // 同步读写文件方便顺序输出打印日志,异常错误直接抛出
            let data = fs.readFileSync(file, {encoding: 'utf8', flag: 'r'})

            fs.writeFileSync(file, data.replace(target, content))

            console.log(`replace success ${file}: ${target} => ${content}`)
        }
    });

/**
 * help
 */

function help() {
    program.parse(process.argv)
    if (program.args.length < 1) {
        return program.help()
    }
}

help();